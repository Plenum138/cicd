{"ast":null,"code":"import { getTimeTableList, detailTimeTable, deleteTimeTable, createTimeTable, editTimeTable } from '../services/api';\nimport { message } from 'antd';\nexport default {\n  namespace: 'time_tables',\n  state: {\n    list: [],\n    detail: {},\n    delete: false,\n    add: false,\n    edit: false\n  },\n  subscriptions: {\n    setup(_ref) {\n      let {\n        dispatch,\n        history\n      } = _ref;\n    }\n\n  },\n  effects: {\n    *timeTableList(_ref2, _ref3) {\n      let {\n        payload\n      } = _ref2;\n      let {\n        call,\n        put\n      } = _ref3;\n      let response = {};\n      response = yield call(getTimeTableList, payload);\n\n      if (!response.status) {\n        message.error(response.msg || response.message || response.err, 5);\n      }\n\n      yield put({\n        type: 'list',\n        data: [...response.data]\n      });\n      return response;\n    },\n\n    *detailTimeTable(_ref4, _ref5) {\n      let {\n        payload\n      } = _ref4;\n      let {\n        call,\n        put\n      } = _ref5;\n      const response = yield call(detailTimeTable, payload);\n\n      if (!response.status) {\n        message.error(response.msg || response.message || response.err, 5);\n      } // if(response.status) {message.success(response.msg, 5);} \n\n\n      yield put({\n        type: 'detail',\n        ...response\n      });\n    },\n\n    *deleteTimeTable(_ref6, _ref7) {\n      let {\n        payload\n      } = _ref6;\n      let {\n        call,\n        put\n      } = _ref7;\n      let response = {};\n      response = yield call(deleteTimeTable, payload);\n\n      if (response.status) {\n        message.success(response.msg || response.message || response.err, 5);\n      }\n\n      if (!response.status) {\n        message.error(response.msg || response.message || response.err, 5);\n      }\n\n      yield put({\n        type: 'delete',\n        message: response.status\n      });\n    },\n\n    *AddTimeTable(_ref8, _ref9) {\n      let {\n        payload\n      } = _ref8;\n      let {\n        call,\n        put\n      } = _ref9;\n      let response = {};\n      response = yield call(createTimeTable, payload);\n\n      if (response.status) {\n        message.success(response.msg || response.message || response.err, 5);\n        yield put({\n          type: 'add',\n          message: response.status\n        });\n      }\n\n      if (!response.status) {\n        message.error(response.msg || response.message || response.err, 5);\n      }\n    },\n\n    *editTimeTable(_ref10, _ref11) {\n      let {\n        payload\n      } = _ref10;\n      let {\n        call,\n        put\n      } = _ref11;\n      let response = {};\n      response = yield call(editTimeTable, payload);\n\n      if (response.status) {\n        message.success(response.msg || response.message || response.err, 5);\n      }\n\n      if (!response.status) {\n        message.error(response.msg || response.message || response.err, 5);\n      }\n\n      yield put({\n        type: 'edit',\n        message: response.status\n      });\n    },\n\n    *clearAction(_ref12, _ref13) {\n      let {\n        payload\n      } = _ref12;\n      let {\n        call,\n        put\n      } = _ref13;\n      yield put({\n        type: 'clear'\n      });\n    }\n\n  },\n  reducers: {\n    list(state, action) {\n      return { ...state,\n        list: [...action.data]\n      };\n    },\n\n    detail(state, action) {\n      return { ...state,\n        detail: action\n      };\n    },\n\n    delete(state, action) {\n      return { ...state,\n        delete: action\n      };\n    },\n\n    add(state, action) {\n      return { ...state,\n        add: action\n      };\n    },\n\n    edit(state, action) {\n      return { ...state,\n        edit: action\n      };\n    },\n\n    clear(state, action) {\n      return { ...state,\n        detail: {},\n        delete: false,\n        add: false,\n        edit: false\n      };\n    }\n\n  }\n};","map":{"version":3,"sources":["/Users/plenum/Desktop/react-native/vivaquad/admin-backend/admin-vivaquad/src/models/time_tables.js"],"names":["getTimeTableList","detailTimeTable","deleteTimeTable","createTimeTable","editTimeTable","message","namespace","state","list","detail","delete","add","edit","subscriptions","setup","dispatch","history","effects","timeTableList","payload","call","put","response","status","error","msg","err","type","data","success","AddTimeTable","clearAction","reducers","action","clear"],"mappings":"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","sourcesContent":["import {getTimeTableList,detailTimeTable, deleteTimeTable , createTimeTable , editTimeTable} \r\nfrom '../services/api'\r\nimport {message} from 'antd'; \r\n\r\nexport default {\r\n  namespace: 'time_tables',\r\n\r\n  state: {\r\n      list:[],\r\n      detail:{},\r\n      delete:false, \r\n      add:false,\r\n      edit:false\r\n\t},\r\n\r\n  subscriptions: {\r\n    setup({ dispatch, history }) {},\r\n  },\r\n\r\n  effects: {\r\n    *timeTableList({ payload }, { call, put }) {\r\n      let response = {};\r\n        response = yield call(getTimeTableList ,payload); \r\n      if(!response.status) {message.error(response.msg || response.message || response.err, 5);}\r\n\t    yield put({ type: 'list', data:[...response.data] });\r\n      return response\r\n    },\r\n    *detailTimeTable({ payload }, { call, put }) {\r\n      const response = yield call(detailTimeTable, payload);\r\n      if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\r\n      // if(response.status) {message.success(response.msg, 5);} \r\n      yield put({ type: 'detail', ...response });\r\n    },\r\n    *deleteTimeTable({ payload }, {call,put}) {\r\n      let response = {};\r\n      response = yield call(deleteTimeTable,payload); \r\n      if(response.status) {message.success(response.msg || response.message || response.err, 5);}\r\n      if(!response.status) {message.error(response.msg || response.message || response.err, 5);}\r\n      yield put({ type: 'delete', message:response.status });\r\n    },\r\n    *AddTimeTable({ payload }, {call,put}) {\r\n      let response = {};\r\n      response = yield call(createTimeTable,payload); \r\n      if(response.status) {\r\n        message.success(response.msg || response.message || response.err, 5);\r\n        yield put({ type: 'add', message: response.status });\r\n      }\r\n      if(!response.status) {message.error(response.msg || response.message || response.err, 5);}\r\n\t   \r\n    },\r\n    *editTimeTable({ payload }, {call,put}) {\r\n      let response = {};\r\n      response = yield call(editTimeTable,payload); \r\n      if(response.status) {message.success(response.msg || response.message || response.err, 5);}\r\n      if(!response.status) {message.error(response.msg || response.message || response.err, 5);}\r\n\t    yield put({ type: 'edit', message: response.status });\r\n    },\r\n    *clearAction({ payload }, { call, put }) {\r\n      yield put({ type: 'clear' });\r\n    },\r\n  },\r\n  \r\n  reducers: {\r\n\r\n    list (state, action) {\r\n      return { ...state, list:[...action.data] };\r\n    },\r\n    detail(state, action) {\r\n      return { ...state, detail: action };\r\n    },\r\n    delete (state, action) {\r\n      return { ...state, delete:action };\r\n    },\r\n\r\n    add (state,action) {\r\n      return { ...state, add: action };\r\n    },\r\n\r\n    edit (state,action) {\r\n      return { ...state, edit: action };\r\n    },\r\n    clear (state,action) {\r\n      return { ...state,  detail:{}, delete:false, add:false, edit:false };\r\n    }\r\n\r\n  },\r\n};"]},"metadata":{},"sourceType":"module"}