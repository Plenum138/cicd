{"ast":null,"code":"// import { lunchAllList, createlunch, updatelunch, deletelunch , getLunchList} from '../services/api'\n// import { message } from 'antd';\n// export default {\n//   namespace: 'subjects',\n//   state: {\n//     add: { count: 0 },\n//     edit: { count: 0 },\n//     fileUp: { count: 0 },\n//     del: { count: 0 }\n//   },\n//   subscriptions: {\n//     setup({ dispatch, history }) {\n//     },\n//   }, \n//   effects: {\n//     *lunchAllList({ payload }, { call, put }) {\n//       const response = yield call(lunchAllList, payload);\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\n//       yield put({ type: 'list', ...response });\n//     },\n//     *getLunchList({ payload }, { call, put }) {\n//       const response = yield call(getLunchList, payload);\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\n//       yield put({ type: 'list', ...response });\n//     },\n//     *lunchAdd({ payload }, { call, put }) {\n//       const response = yield call(createlunch, payload);\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\n//       if (response.status) { message.success(response.message, 5); }\n//       yield put({ type: 'add', ...response });\n//     },\n//     *lunchEdit({ payload }, { call, put }) {\n//       const response = yield call(updatelunch, payload);\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\n//       if (response.status) { message.success(response.message, 5); }\n//       yield put({ type: 'edit', ...response });\n//     },\n//     *lunchDelete({ payload }, { call, put }) {\n//       const response = yield call(deletelunch, payload);\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\n//       if (response.status) { message.success(response.message, 5); }\n//       yield put({ type: 'del', ...response });\n//     },\n//     *clearAction({ payload }, { call, put }) {\n//       yield put({ type: 'clear'});\n//     },\n//   },\n//   reducers: {\n//     list(state, action) {\n//       return { ...state, list: action };\n//     },\n//     add(state, action) {\n//       action.count = state.add.count + 1;\n//       return { ...state, add: action };\n//     },\n//     edit(state, action) {\n//       action.count = state.edit.count + 1;\n//       return { ...state, edit: action };\n//     },\n//     del(state, action) {\n//       action.count = state.del.count + 1;\n//       return { ...state, del: action };\n//     },\n//     clear(state, action) {\n//       return { ...state, edit:{count:0}, del:{count:0}};\n//       },\n//   },\n// };\nimport { subjectAllList, createsubject, updatesubject, deletesubject, getsubjectList } from '../services/api';\nimport { message } from 'antd';\nexport default {\n  namespace: 'subjects',\n  state: {\n    add: {\n      count: 0\n    },\n    edit: {\n      count: 0\n    },\n    fileUp: {\n      count: 0\n    },\n    del: {\n      count: 0\n    }\n  },\n  subscriptions: {\n    setup(_ref) {\n      let {\n        dispatch,\n        history\n      } = _ref;\n    }\n\n  },\n  effects: {\n    *subjectAllList(_ref2, _ref3) {\n      let {\n        payload\n      } = _ref2;\n      let {\n        call,\n        put\n      } = _ref3;\n      const response = yield call(subjectAllList, payload);\n\n      if (!response.status) {\n        message.error(response.msg || response.message || response.err, 5);\n      }\n\n      yield put({\n        type: 'list',\n        ...response\n      });\n    },\n\n    *getsubjectList(_ref4, _ref5) {\n      let {\n        payload\n      } = _ref4;\n      let {\n        call,\n        put\n      } = _ref5;\n      const response = yield call(getsubjectList, payload);\n\n      if (!response.status) {\n        message.error(response.msg || response.message || response.err, 5);\n      }\n\n      yield put({\n        type: 'list',\n        ...response\n      });\n    },\n\n    *subjectAdd(_ref6, _ref7) {\n      let {\n        payload\n      } = _ref6;\n      let {\n        call,\n        put\n      } = _ref7;\n      const response = yield call(createsubject, payload);\n\n      if (!response.status) {\n        message.error(response.msg || response.message || response.err, 5);\n      }\n\n      if (response.status) {\n        message.success(response.message, 5);\n      }\n\n      yield put({\n        type: 'add',\n        ...response\n      });\n    },\n\n    *subjectEdit(_ref8, _ref9) {\n      let {\n        payload\n      } = _ref8;\n      let {\n        call,\n        put\n      } = _ref9;\n      const response = yield call(updatesubject, payload);\n\n      if (!response.status) {\n        message.error(response.msg || response.message || response.err, 5);\n      }\n\n      if (response.status) {\n        message.success(response.message, 5);\n      }\n\n      yield put({\n        type: 'edit',\n        ...response\n      });\n    },\n\n    *subjectDelete(_ref10, _ref11) {\n      let {\n        payload\n      } = _ref10;\n      let {\n        call,\n        put\n      } = _ref11;\n      const response = yield call(deletesubject, payload);\n\n      if (!response.status) {\n        message.error(response.msg || response.message || response.err, 5);\n      }\n\n      if (response.status) {\n        message.success(response.message, 5);\n      }\n\n      yield put({\n        type: 'del',\n        ...response\n      });\n    },\n\n    *clearAction(_ref12, _ref13) {\n      let {\n        payload\n      } = _ref12;\n      let {\n        call,\n        put\n      } = _ref13;\n      yield put({\n        type: 'clear'\n      });\n    }\n\n  },\n  reducers: {\n    list(state, action) {\n      return { ...state,\n        list: action\n      };\n    },\n\n    add(state, action) {\n      action.count = state.add.count + 1;\n      return { ...state,\n        add: action\n      };\n    },\n\n    edit(state, action) {\n      action.count = state.edit.count + 1;\n      return { ...state,\n        edit: action\n      };\n    },\n\n    del(state, action) {\n      action.count = state.del.count + 1;\n      return { ...state,\n        del: action\n      };\n    },\n\n    clear(state, action) {\n      return { ...state,\n        edit: {\n          count: 0\n        },\n        del: {\n          count: 0\n        }\n      };\n    }\n\n  }\n};","map":{"version":3,"sources":["/Users/kalyansingh/Desktop/Project/vivaquad/admin-backend/admin-vivaquad/src/models/subjects.js"],"names":["subjectAllList","createsubject","updatesubject","deletesubject","getsubjectList","message","namespace","state","add","count","edit","fileUp","del","subscriptions","setup","dispatch","history","effects","payload","call","put","response","status","error","msg","err","type","subjectAdd","success","subjectEdit","subjectDelete","clearAction","reducers","list","action","clear"],"mappings":"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","sourcesContent":["// import { lunchAllList, createlunch, updatelunch, deletelunch , getLunchList} from '../services/api'\r\n// import { message } from 'antd';\r\n\r\n// export default {\r\n//   namespace: 'subjects',\r\n\r\n//   state: {\r\n//     add: { count: 0 },\r\n//     edit: { count: 0 },\r\n//     fileUp: { count: 0 },\r\n//     del: { count: 0 }\r\n//   },\r\n\r\n//   subscriptions: {\r\n//     setup({ dispatch, history }) {\r\n//     },\r\n//   }, \r\n\r\n//   effects: {\r\n//     *lunchAllList({ payload }, { call, put }) {\r\n//       const response = yield call(lunchAllList, payload);\r\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\r\n//       yield put({ type: 'list', ...response });\r\n//     },\r\n//     *getLunchList({ payload }, { call, put }) {\r\n//       const response = yield call(getLunchList, payload);\r\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\r\n//       yield put({ type: 'list', ...response });\r\n//     },\r\n//     *lunchAdd({ payload }, { call, put }) {\r\n//       const response = yield call(createlunch, payload);\r\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\r\n//       if (response.status) { message.success(response.message, 5); }\r\n//       yield put({ type: 'add', ...response });\r\n//     },\r\n//     *lunchEdit({ payload }, { call, put }) {\r\n//       const response = yield call(updatelunch, payload);\r\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\r\n//       if (response.status) { message.success(response.message, 5); }\r\n//       yield put({ type: 'edit', ...response });\r\n//     },\r\n//     *lunchDelete({ payload }, { call, put }) {\r\n//       const response = yield call(deletelunch, payload);\r\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\r\n//       if (response.status) { message.success(response.message, 5); }\r\n//       yield put({ type: 'del', ...response });\r\n//     },\r\n//     *clearAction({ payload }, { call, put }) {\r\n//       yield put({ type: 'clear'});\r\n//     },\r\n  \r\n//   },\r\n\r\n//   reducers: {\r\n//     list(state, action) {\r\n//       return { ...state, list: action };\r\n//     },\r\n//     add(state, action) {\r\n//       action.count = state.add.count + 1;\r\n//       return { ...state, add: action };\r\n//     },\r\n//     edit(state, action) {\r\n//       action.count = state.edit.count + 1;\r\n//       return { ...state, edit: action };\r\n//     },\r\n//     del(state, action) {\r\n//       action.count = state.del.count + 1;\r\n//       return { ...state, del: action };\r\n//     },\r\n//     clear(state, action) {\r\n//       return { ...state, edit:{count:0}, del:{count:0}};\r\n//       },\r\n//   },\r\n// };\r\n\r\n\r\nimport { subjectAllList, createsubject, updatesubject, deletesubject , getsubjectList} from '../services/api'\r\nimport { message } from 'antd';\r\n\r\nexport default {\r\n  namespace: 'subjects',\r\n\r\n  state: {\r\n    add: { count: 0 },\r\n    edit: { count: 0 },\r\n    fileUp: { count: 0 },\r\n    del: { count: 0 }\r\n  },\r\n\r\n  subscriptions: {\r\n    setup({ dispatch, history }) {\r\n    },\r\n  }, \r\n\r\n  effects: {\r\n    *subjectAllList({ payload }, { call, put }) {\r\n      const response = yield call(subjectAllList, payload);\r\n      if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\r\n      yield put({ type: 'list', ...response });\r\n    },\r\n    *getsubjectList({ payload }, { call, put }) {\r\n      const response = yield call(getsubjectList, payload);\r\n      if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\r\n      yield put({ type: 'list', ...response });\r\n    },\r\n    *subjectAdd({ payload }, { call, put }) {\r\n      const response = yield call(createsubject, payload);\r\n      if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\r\n      if (response.status) { message.success(response.message, 5); }\r\n      yield put({ type: 'add', ...response });\r\n    },\r\n    *subjectEdit({ payload }, { call, put }) {\r\n      const response = yield call(updatesubject, payload);\r\n      if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\r\n      if (response.status) { message.success(response.message, 5); }\r\n      yield put({ type: 'edit', ...response });\r\n    },\r\n    *subjectDelete({ payload }, { call, put }) {\r\n      const response = yield call(deletesubject, payload);\r\n      if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\r\n      if (response.status) { message.success(response.message, 5); }\r\n      yield put({ type: 'del', ...response });\r\n    },\r\n    *clearAction({ payload }, { call, put }) {\r\n      yield put({ type: 'clear'});\r\n    },\r\n  \r\n  },\r\n\r\n  reducers: {\r\n    list(state, action) {\r\n      return { ...state, list: action };\r\n    },\r\n    add(state, action) {\r\n      action.count = state.add.count + 1;\r\n      return { ...state, add: action };\r\n    },\r\n    edit(state, action) {\r\n      action.count = state.edit.count + 1;\r\n      return { ...state, edit: action };\r\n    },\r\n    del(state, action) {\r\n      action.count = state.del.count + 1;\r\n      return { ...state, del: action };\r\n    },\r\n    clear(state, action) {\r\n      return { ...state, edit:{count:0}, del:{count:0}};\r\n      },\r\n  },\r\n};"]},"metadata":{},"sourceType":"module"}