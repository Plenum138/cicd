{"ast":null,"code":"// import { lunchAllList, createlunch, updatelunch, deletelunch , getLunchList} from '../services/api'\n// import { message } from 'antd';\n// export default {\n//   namespace: 'subjects',\n//   state: {\n//     add: { count: 0 },\n//     edit: { count: 0 },\n//     fileUp: { count: 0 },\n//     del: { count: 0 }\n//   },\n//   subscriptions: {\n//     setup({ dispatch, history }) {\n//     },\n//   }, \n//   effects: {\n//     *lunchAllList({ payload }, { call, put }) {\n//       const response = yield call(lunchAllList, payload);\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\n//       yield put({ type: 'list', ...response });\n//     },\n//     *getLunchList({ payload }, { call, put }) {\n//       const response = yield call(getLunchList, payload);\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\n//       yield put({ type: 'list', ...response });\n//     },\n//     *lunchAdd({ payload }, { call, put }) {\n//       const response = yield call(createlunch, payload);\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\n//       if (response.status) { message.success(response.message, 5); }\n//       yield put({ type: 'add', ...response });\n//     },\n//     *lunchEdit({ payload }, { call, put }) {\n//       const response = yield call(updatelunch, payload);\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\n//       if (response.status) { message.success(response.message, 5); }\n//       yield put({ type: 'edit', ...response });\n//     },\n//     *lunchDelete({ payload }, { call, put }) {\n//       const response = yield call(deletelunch, payload);\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\n//       if (response.status) { message.success(response.message, 5); }\n//       yield put({ type: 'del', ...response });\n//     },\n//     *clearAction({ payload }, { call, put }) {\n//       yield put({ type: 'clear'});\n//     },\n//   },\n//   reducers: {\n//     list(state, action) {\n//       return { ...state, list: action };\n//     },\n//     add(state, action) {\n//       action.count = state.add.count + 1;\n//       return { ...state, add: action };\n//     },\n//     edit(state, action) {\n//       action.count = state.edit.count + 1;\n//       return { ...state, edit: action };\n//     },\n//     del(state, action) {\n//       action.count = state.del.count + 1;\n//       return { ...state, del: action };\n//     },\n//     clear(state, action) {\n//       return { ...state, edit:{count:0}, del:{count:0}};\n//       },\n//   },\n// };\n// import { subjectAllList, createsubject, updatesubject, deletesubject , getsubjectList} from '../services/api'\n// import { message } from 'antd';\n// export default {\n//   namespace: 'subjectes',\n//   state: {\n//     add: { count: 0 },\n//     edit: { count: 0 },\n//     fileUp: { count: 0 },\n//     del: { count: 0 }\n//   },\n//   subscriptions: {\n//     setup({ dispatch, history }) {\n//     },\n//   }, \n//   effects: {\n//     *subjectAllList({ payload }, { call, put }) {\n//       const response = yield call(subjectAllList, payload);\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\n//       yield put({ type: 'list', ...response });\n//     },\n//     *getsubjectList({ payload }, { call, put }) {\n//       const response = yield call(getsubjectList, payload);\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\n//       yield put({ type: 'list', ...response });\n//     },\n//     *subjectAdd({ payload }, { call, put }) {\n//       const response = yield call(createsubject, payload);\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\n//       if (response.status) { message.success(response.message, 5); }\n//       yield put({ type: 'add', ...response });\n//     },\n//     *subjectEdit({ payload }, { call, put }) {\n//       const response = yield call(updatesubject, payload);\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\n//       if (response.status) { message.success(response.message, 5); }\n//       yield put({ type: 'edit', ...response });\n//     },\n//     *subjectDelete({ payload }, { call, put }) {\n//       const response = yield call(deletesubject, payload);\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\n//       if (response.status) { message.success(response.message, 5); }\n//       yield put({ type: 'del', ...response });\n//     },\n//     *clearAction({ payload }, { call, put }) {\n//       yield put({ type: 'clear'});\n//     },\n//   },\n//   reducers: {\n//     list(state, action) {\n//       return { ...state, list: action };\n//     },\n//     add(state, action) {\n//       action.count = state.add.count + 1;\n//       return { ...state, add: action };\n//     },\n//     edit(state, action) {\n//       action.count = state.edit.count + 1;\n//       return { ...state, edit: action };\n//     },\n//     del(state, action) {\n//       action.count = state.del.count + 1;\n//       return { ...state, del: action };\n//     },\n//     clear(state, action) {\n//       return { ...state, edit:{count:0}, del:{count:0}};\n//       },\n//   },\n// };","map":{"version":3,"sources":["/Users/kalyansingh/Desktop/Project/vivaquad/admin-backend/admin-vivaquad/src/models/subjects.js"],"names":[],"mappingssourcesContent":["// import { lunchAllList, createlunch, updatelunch, deletelunch , getLunchList} from '../services/api'\r\n// import { message } from 'antd';\r\n\r\n// export default {\r\n//   namespace: 'subjects',\r\n\r\n//   state: {\r\n//     add: { count: 0 },\r\n//     edit: { count: 0 },\r\n//     fileUp: { count: 0 },\r\n//     del: { count: 0 }\r\n//   },\r\n\r\n//   subscriptions: {\r\n//     setup({ dispatch, history }) {\r\n//     },\r\n//   }, \r\n\r\n//   effects: {\r\n//     *lunchAllList({ payload }, { call, put }) {\r\n//       const response = yield call(lunchAllList, payload);\r\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\r\n//       yield put({ type: 'list', ...response });\r\n//     },\r\n//     *getLunchList({ payload }, { call, put }) {\r\n//       const response = yield call(getLunchList, payload);\r\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\r\n//       yield put({ type: 'list', ...response });\r\n//     },\r\n//     *lunchAdd({ payload }, { call, put }) {\r\n//       const response = yield call(createlunch, payload);\r\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\r\n//       if (response.status) { message.success(response.message, 5); }\r\n//       yield put({ type: 'add', ...response });\r\n//     },\r\n//     *lunchEdit({ payload }, { call, put }) {\r\n//       const response = yield call(updatelunch, payload);\r\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\r\n//       if (response.status) { message.success(response.message, 5); }\r\n//       yield put({ type: 'edit', ...response });\r\n//     },\r\n//     *lunchDelete({ payload }, { call, put }) {\r\n//       const response = yield call(deletelunch, payload);\r\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\r\n//       if (response.status) { message.success(response.message, 5); }\r\n//       yield put({ type: 'del', ...response });\r\n//     },\r\n//     *clearAction({ payload }, { call, put }) {\r\n//       yield put({ type: 'clear'});\r\n//     },\r\n  \r\n//   },\r\n\r\n//   reducers: {\r\n//     list(state, action) {\r\n//       return { ...state, list: action };\r\n//     },\r\n//     add(state, action) {\r\n//       action.count = state.add.count + 1;\r\n//       return { ...state, add: action };\r\n//     },\r\n//     edit(state, action) {\r\n//       action.count = state.edit.count + 1;\r\n//       return { ...state, edit: action };\r\n//     },\r\n//     del(state, action) {\r\n//       action.count = state.del.count + 1;\r\n//       return { ...state, del: action };\r\n//     },\r\n//     clear(state, action) {\r\n//       return { ...state, edit:{count:0}, del:{count:0}};\r\n//       },\r\n//   },\r\n// };\r\n\r\n\r\n// import { subjectAllList, createsubject, updatesubject, deletesubject , getsubjectList} from '../services/api'\r\n// import { message } from 'antd';\r\n\r\n// export default {\r\n//   namespace: 'subjectes',\r\n\r\n//   state: {\r\n//     add: { count: 0 },\r\n//     edit: { count: 0 },\r\n//     fileUp: { count: 0 },\r\n//     del: { count: 0 }\r\n//   },\r\n\r\n//   subscriptions: {\r\n//     setup({ dispatch, history }) {\r\n//     },\r\n//   }, \r\n\r\n//   effects: {\r\n//     *subjectAllList({ payload }, { call, put }) {\r\n//       const response = yield call(subjectAllList, payload);\r\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\r\n//       yield put({ type: 'list', ...response });\r\n//     },\r\n//     *getsubjectList({ payload }, { call, put }) {\r\n//       const response = yield call(getsubjectList, payload);\r\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\r\n//       yield put({ type: 'list', ...response });\r\n//     },\r\n//     *subjectAdd({ payload }, { call, put }) {\r\n//       const response = yield call(createsubject, payload);\r\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\r\n//       if (response.status) { message.success(response.message, 5); }\r\n//       yield put({ type: 'add', ...response });\r\n//     },\r\n//     *subjectEdit({ payload }, { call, put }) {\r\n//       const response = yield call(updatesubject, payload);\r\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\r\n//       if (response.status) { message.success(response.message, 5); }\r\n//       yield put({ type: 'edit', ...response });\r\n//     },\r\n//     *subjectDelete({ payload }, { call, put }) {\r\n//       const response = yield call(deletesubject, payload);\r\n//       if (!response.status) { message.error(response.msg || response.message || response.err, 5); }\r\n//       if (response.status) { message.success(response.message, 5); }\r\n//       yield put({ type: 'del', ...response });\r\n//     },\r\n//     *clearAction({ payload }, { call, put }) {\r\n//       yield put({ type: 'clear'});\r\n//     },\r\n  \r\n//   },\r\n\r\n//   reducers: {\r\n//     list(state, action) {\r\n//       return { ...state, list: action };\r\n//     },\r\n//     add(state, action) {\r\n//       action.count = state.add.count + 1;\r\n//       return { ...state, add: action };\r\n//     },\r\n//     edit(state, action) {\r\n//       action.count = state.edit.count + 1;\r\n//       return { ...state, edit: action };\r\n//     },\r\n//     del(state, action) {\r\n//       action.count = state.del.count + 1;\r\n//       return { ...state, del: action };\r\n//     },\r\n//     clear(state, action) {\r\n//       return { ...state, edit:{count:0}, del:{count:0}};\r\n//       },\r\n//   },\r\n// };"]},"metadata":{},"sourceType":"module"}